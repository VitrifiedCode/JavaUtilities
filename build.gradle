buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.3.1"
    }
}

group 'com.github.vitrifiedcode.javautilities'
version '1.0'

apply plugin: 'java'
apply plugin: "me.champeau.gradle.jmh"
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains:annotations:15.0"
    compile "com.google.code.findbugs:jsr305:1.3.9"
    compile "com.google.guava:guava:19.0"
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'org.fusesource.jansi:jansi:1.12'

    compile "org.apache.commons:commons-collections4:4.1"
    compile "org.apache.commons:commons-lang3:3.5"
    compile "org.apache.commons:commons-compress:1.13"
    compile "commons-io:commons-io:2.5"
    compile "commons-net:commons-net:3.6"
    compile "org.apache.commons:commons-exec:1.3"
    compile "commons-codec:commons-codec:1.10"
    compile "org.apache.commons:commons-math3:3.6.1"
    compile "org.apache.httpcomponents:httpclient:4.5.3"
    compile "commons-validator:commons-validator:1.6"

    testCompile group: 'junit', name: 'junit', version: '4.11'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jmh {
    if(project.hasProperty("EXECUTE_JMH") || true) {
        iterations = 20
        benchmarkMode = ['avgt']
        fork = 2
        warmupIterations = 10
    } else
    {
        iterations = 1
        benchmarkMode = ['avgt']
        fork = 1
        warmupIterations = 1
    }
}

task executeClass(type:JavaExec) {
    main = project.hasProperty('mainClass') ? project.findProperty('mainClass') : ' '
    classpath = sourceSets.main.runtimeClasspath
}

task executeClassTest(type:JavaExec) {
    main = project.hasProperty('mainClass') ? project.findProperty('mainClass') : ' '
    classpath = sourceSets.test.runtimeClasspath
}
